/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

const render = (function() {
  //
  // Variables
  //

  const defaults = {
    navItemContainer: '.left_menu_items',
    sectionsContainer: '#section_groups',
    resources: [
      {
        title: 'HTML Reference',
        content: '首页',
        src: './svg/example.svg',
        linkHref: 'https://developer.mozilla.org/en-US/docs/Web/HTML/Element',
        category: 'javascript',
      },
      {
        title: 'HTML Attribute Reference',
        content: 'HTML',
        src: './svg/example.svg',
        linkHref: 'https://www.w3schools.com/tags/ref_attributes.asp',
        category: 'javascript',
      },
      {
        title: 'glyphs(符号)',
        content: 'Javascript',
        src: './svg/example.svg',
        linkHref: 'https://css-tricks.com/snippets/html/glyphs/',
        category: 'css',
      },
      {
        title: 'glyphs(符号)',
        content: 'Javascript',
        src: './svg/example.svg',
        linkHref: 'https://css-tricks.com/snippets/html/glyphs/',
        category: 'html',
      },
      {
        title: 'glyphs(符号)',
        content: 'Javascript',
        src: './svg/example.svg',
        linkHref: 'https://css-tricks.com/snippets/html/glyphs/',
        category: 'icon',
      },
      {
        title: 'Hello world',
        content: 'Javascript',
        src: './svg/example.svg',
        linkHref: 'https://css-tricks.com/snippets/html/glyphs/',
        category: 'icon',
      }
    ],
    callback: function (content) {
      return content;
    },
  };

  //
  // Methods
  //

  // Remove duplicate values from an array
  const uniqueArray = function (arr) {
    return arr.filter((value, index, self) => self.indexOf(value) === index);
  };

  const renderNavItems = function (selector, categories) {
    // Get the left aside navigation element
    const leftMenusItems = document.querySelector(selector);

      // Render left aside navigation items
    const items = categories.map((category) => {
      return `
        <li class="left_menu_item">
          <img class="menu_item_icon" src="/svg/example.svg"></img>
          <p class="menu_item_content">${category}</p>
        </li>
      `;
    });

    leftMenusItems.innerHTML = items.join('');
  };

  // 1. Create the render methods of section groups
  const renderSectionGroups = function(selector, categories) {
    // Get the container of the section groups
    const groupsContainer = document.querySelector(selector);

    // Get section items
    const groups = categories.map((category) => {
      return `
        <section id="${category}" class="group" >
          <h3 class="group_title">${category}</h3>
          <div class="group_content">
            
          </div>
        </section>  
      `;
    });

    groupsContainer.innerHTML = groups.join('');
  }

  //
  // Inits & Events
  //

  // Public Methods APIs
  return {
    init: function (options) {
      options = options || {};
      // Merge both user defaults and options.
      const settings = Object.assign({}, defaults, options);

      // Get all categories of resources
      const categories = uniqueArray(settings.resources.map(
        (resource) => resource.category
      ));

      renderNavItems(settings.navItemContainer, categories);
      renderSectionGroups(settings.sectionsContainer, categories);
    },
  };

  // TODO
  // Create the destory methods of plugin
})();

render.init();

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
